<?php

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Project adjustments to the field edit form.
 */
function project_form_field_ui_field_edit_form_alter(&$form) {
  // field_project_type has certain settings that project depends on, force
  // those here.
  if ($form['#field']['field_name'] == 'field_project_type') {
    $form['field']['#access'] = FALSE;
    $form['instance']['required']['#value'] = TRUE;
    $form['instance']['required']['#access'] = FALSE;
  }
}

/**
 * Determine whether or not a node is a project.
 *
 * @param $node
 *   A node to check.
 */
function project_node_is_project($node) {
  return !empty($node) && project_node_type_is_project($node->type);
}

/**
 * Determine whether or not a given node type behaves as a project.
 *
 * We just check the project_behavior_[node_type] setting for the given
 * node type to see if the type is configured to behave like a project.
 *
 * @param string $node_type
 *   The node type (machine name) to check.
 *
 * @return boolean
 *   Is the given node type a project node type or not?
 */
function project_node_type_is_project($node_type) {
  $project_behavior = variable_get('project_behavior_' . $node_type, '');
  return $project_behavior == 'project';
}

/**
 * Retrieve a list of node types that are considered projects.
 *
 * @return array
 *   An array of bundle names (aka node type names) that are configured to
 *   have project nature.
 *
 * @see project_project_node_type_is_project()
 */
function project_project_node_types() {
  $project_node_types = array();
  $node_types = node_type_get_types();
  foreach ($node_types as $type) {
    if (project_node_type_is_project($type->type)) {
      $project_node_types[] = $type->type;
    }
  }
  return $project_node_types;
}

/**
 * Menu loader callback to load a project node.
 *
 * @param $arg
 *   The menu argument to attempt to load a project from.  Can be either a
 *   numeric node ID (nid), or a string machine name
 *   (field_project_machine_name).
 *
 * @return
 *   The loaded node object if the argument was a valid project, FALSE if not.
 */
function project_load($arg) {
  if (is_numeric($arg)) {
    $node = node_load($arg);
  }
  else {
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node', '=')
      ->fieldCondition('field_project_machine_name', 'value', $arg, '=')
      ->execute();
    if (!empty($result['node'])) {
      $entities = entity_load('node', array_keys($result['node']));
      $node = reset($entities);
    }
  }
  if (!isset($node->type) || !project_node_is_project($node)) {
    return FALSE;
  }
  return $node;
}

/**
 * Implements hook_views_api().
 */
function project_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'project') .'/views',
  );
}

/**
 * Implementats hook_menu().
 */
function project_menu() {
  $items = array();

  $items['node/%project/maintainers'] = array(
    'title' => 'Maintainers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('project_maintainers_form', 1),
    'access callback' => 'project_user_access',
    'access arguments' => array(1, 'administer maintainers'),
    'file' => 'includes/project_maintainers.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );

  $items['node/%project/maintainers/delete/%user'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('project_maintainer_delete_confirm', 1, 4),
    'access callback' => 'project_user_access',
    'access arguments' => array(1, 'administer maintainers'),
    'file' => 'includes/project_maintainers.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/project'] = array(
    'title' => t('Project'),
    'access callback' => 'user_access',
    'access arguments' => array('administer projects'),
  );

  $items['admin/config/project/settings'] = array(
    'title' => t('Project settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('project_main_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer projects'),
    'description' => t('Configure system-wide settings for the Project module.'),
  );

  return $items;
}

/**
 * Add default local task for project node edit page.
 */
function project_menu_alter(&$callbacks) {
  $callbacks['node/%node/edit/project'] = $callbacks['node/%node/edit'];
  $callbacks['node/%node/edit/project']['type'] = MENU_DEFAULT_LOCAL_TASK;
  $callbacks['node/%node/edit/project']['title'] = 'Project';
  // Only take over secondary local tasks for projects.
  $callbacks['node/%node/edit/project']['access callback'] = 'project_user_access';
  $callbacks['node/%node/edit/project']['access arguments'] = array(1, 'edit project');
}

/**
 * todo D7, reimplement
 */
function project_project_set_breadcrumb() {
}

/**
 * Get the project node context from the currently active menu, if any.
 *
 * @return
 *   A fully loaded project $node object if the currently active menu has a
 *   project node context, or NULL if the menu isn't pointing to a project.
 */
function project_get_project_from_menu() {
  $node = menu_get_object('project');
  // If that didn't work, load it directly as a node and see if it's a project.
  if (empty($node)) {
    $node = menu_get_object();
    if (empty($node) || !project_node_is_project($node)) {
      $node = NULL;
    }
  }
  return $node;
}

function project_main_settings_form() {
  $form = array();

  $form['project_selection_widget'] = array(
    '#type' => 'radios',
    '#title' => t('Project selection widget'),
    '#options' => array(
      'select' => t('Select Menu'),
      'auto' => t('Autocomplete'),
    ),
    '#default_value' => variable_get('project_selection_widget', 'select'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_permission().
 */
function project_permission() {
  return array(
    'administer projects' => array(
      'title' => t('Administer projects'),
      'description' => t('Administer all projects.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_node_load().
 */
function project_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if (project_node_is_project($node)) {
      $node->project = array();
      $node->project['maintainers'] = project_maintainer_project_load($node->nid);
    }
  }
}

/**
 * Implements hook_node_validate().
 */
function project_node_validate($node, $form, &$form_state) {
  if (!project_node_is_project($node)) {
    return;
  }
  if (!empty($form_state['clicked_button']) && $form_state['clicked_button']['#value'] == t('Delete')) {
    //Don't validate during deletion.
    return;
  }
  // Ensure title is unique across all projects.
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', project_project_node_types(), 'IN')
    ->propertyCondition('title', $node->title);
  if ($node->nid) {
    $query->entityCondition('entity_id', $node->nid, '!=');
  }
  $count = $query->count()->execute();
  if ($count) {
    form_set_error('title', t('This project name is already in use.'));
  }
}

/**
 * Implements hook_theme().
 */
function project_theme() {
  return array(
    'project_maintainers_form' => array(
      'file' => 'includes/project_maintainers.inc',
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_node_insert().
 */
function project_node_insert($node) {
  if (project_node_is_project($node)) {
    $perms = array_fill_keys(array_keys(project_permission_load($node)), 1);
    project_maintainer_save($node->nid, $node->uid, $perms);
  }
}

/**
 * Implements hook_node_insert().
 */
function project_node_update($node) {
  if (project_node_is_project($node)) {
    $perms = array_fill_keys(array_keys(project_permission_load($node)), 1);
    project_maintainer_save($node->nid, $node->uid, $perms);
  }
}

/**
 * Implements hook_node_access().
 */
function project_node_access($node, $op, $account) {
  switch (gettype($node)) {
    case 'object':
      if (project_node_is_project($node)) {
        return (project_user_access($node, $op . ' project', $account)) ? NODE_ACCESS_ALLOW : NODE_ACCESS_IGNORE;
      }

      return NODE_ACCESS_IGNORE;

    default:
      return NODE_ACCESS_IGNORE;
  }
}

/**
 * Implements hook_node_delete().
 */
function project_node_delete($node) {
  if (project_node_is_project($node)) {
    db_query("DELETE FROM {project_maintainer} WHERE nid = :nid", array(':nid' => $node->nid));


  }
}

/**
 * See if the current user has the given permission on a given project.
 *
 * @param $project
 *   The project to check access against. Can be either a numeric node ID
 *   (nid) or a fully-loaded $node object.
 * @param $permission
 *   The string representing the permission to check access for.
 */
function project_user_access($project, $permission, $account = NULL) {
  global $user;

  if ($account == NULL) {
    $account = $user;
  }

  if (empty($account->uid)) {
    return FALSE;
  }

  $project_obj = is_numeric($project) ? node_load($project) : $project;
  if (!isset($project_obj) || (isset($project_obj->type) && !project_node_is_project($project_obj))) {
    return FALSE;
  }

  // If the user has the site-wide admin permission, always grant access.
  if (user_access('administer projects')) {
     return TRUE;
  }

  // Project owners are treated as super users and can always access.
  if ($account->uid == $project_obj->uid) {
    return TRUE;
  }

  // Otherwise, see if the user has the right permission for this project.
  return !empty($project_obj->project['maintainers'][$account->uid]['permissions'][$permission]);

  // If we haven't granted access yet, deny it.
  return FALSE;
}

/**
 * Load all per-project permission information and return it.
 *
 * This invokes hook_project_permission_info() and
 * hook_project_permission_alter(), and caches the results in RAM.
 *
 * @param $project
 *   A project object to pass to hook_project_permission_info().
 *
 * @see hook_project_permission_info()
 * @see hook_project_permission_alter()
 * @see drupal_alter()
 */
function project_permission_load($project) {
  static $project_permissions = array();
  if (empty($project_permissions[$project->nid])) {
    $permissions = module_invoke_all('project_permission_info', $project);
    drupal_alter('project_permission', $permissions, $project);
    $project_permissions[$project->nid] = $permissions;
  }
  return $project_permissions[$project->nid];
}

/**
 * Implement hook_project_permission_info()
 */
function project_project_permission_info($project = NULL) {
  return array(
    'update project' => array(
      'title' => t('Edit project'),
      'description' => t('Allows a user to edit a project and modify its settings.'),
    ),
    'administer maintainers' => array(
      'title' => t('Administer maintainers'),
      'description' => t('Allows a user to add and remove other project maintainers and to modify their permissions.'),
    ),
  );
}

/**
 * Save the permissions associated with a maintainer for a given project.
 *
 * This creates a new maintainer record if none currently exists. Furthermore,
 * it invokes hook_project_maintainer_save() to give other modules a chance to
 * act on the fact that a maintainer is being saved.
 *
 * @param $nid
 *   The Project NID to update the maintainer for.
 * @param $uid
 *   The user ID of the maintainer to update.
 * @param array $permissions
 *   Associative array of which project-level permissions the maintainer
 *   should have. The keys are permission names, and the values are if the
 *   permission should be granted or not.
 *
 * @see hook_project_maintainer_save()
 * @see hook_project_permission_info()
 */
function project_maintainer_save($nid, $uid, $permissions = array()) {
  // Try to update an existing record, if any.
  db_merge('project_maintainer')
    ->key(array('nid' => $nid, 'uid' => $uid))
    ->fields(array(
      'update_project' => $permissions['update project'],
      'administer_maintainers' => $permissions['administer maintainers']
    ))
    ->execute();

  // Invoke hook_project_maintainer_save() to let other modules know this
  // maintainer is being saved so they can take any actions or record any
  // data they need to.
  module_invoke_all('project_maintainer_save', $nid, $uid, $permissions);
}

/**
 * Remove a maintainer from a given project.
 *
 * @param $nid
 *   The Project NID to remove the maintainer from.
 * @param $uid
 *   The user ID of the maintainer to remove.
 */
function project_maintainer_remove($nid, $uid) {
  db_query("DELETE FROM {project_maintainer} WHERE nid = :nid and uid = :uid", array(':nid' => $nid, ':uid' => $uid));

  // Invoke hook_project_maintainer_remove() to let other modules know this
  // maintainer is being removed so they can take any actions or record any
  // data they need to.
  module_invoke_all('project_maintainer_remove', $nid, $uid);
}

/**
 * Load all the per-project maintainer info for a given project.
 *
 * @param $nid
 *   Node ID of the project to load maintainer info about.
 *
 * @return
 *   Array of maintainer info for the given project.
 *
 * @see hook_project_maintainer_project_load().
 */
function project_maintainer_project_load($nid) {
  $maintainers = array();

  // We don't want to load all the permissions here, just the ones that
  // Project itself is responsible for, so we use our implementation of the
  // hook, instead of the global load function.
  $project_perms = project_project_permission_info();
  $result = db_query('SELECT u.name, pm.* FROM {project_maintainer} pm INNER JOIN {users} u ON pm.uid = u.uid WHERE pm.nid = :nid ORDER BY u.name', array(':nid' => $nid));
  foreach ($result as $maintainer) {
    $maintainers[$maintainer->uid]['name'] = $maintainer->name;
    foreach ($project_perms as $perm_name => $perm_info) {
      $db_field = str_replace(' ', '_', $perm_name);
      $maintainers[$maintainer->uid]['permissions'][$perm_name] = $maintainer->$db_field;
    }
  }

  // Invoke hook_project_maintainer_project_load(). We can't use
  // module_invoke_all() since we want a reference to the $maintainers array.
  foreach (module_implements('project_maintainer_project_load') as $module) {
    $function_name = $module . '_project_maintainer_project_load';
    $function_name($nid, $maintainers);
  }

  return $maintainers;
}

/**
 * Get an array of projects for use in select form elements.
 *
 * The keys are the project nid, and the values are the project names. The
 * array will be sorted into the proper catagories with headers for each term,
 * based the node types of the projects.
 *
 * @param $conditions
 *   An array of conditions represented as an associative array. Each
 *   conditions' keys map to parameters for EntityFieldQuery::fieldCondition():
 *   - 'field', such as 'field_project_has_issue_queue' or
 *     'field_project_type', required.
 *   - 'column', default 'value'
 *   - 'value', default '1'
 *   - 'operator', default '='
 *   For example, to get sandbox projects with issue queues:
 *     array(
 *       array('field' => 'field_project_type', 'value' => 'sandbox'),
 *       array('field' => 'field_project_has_issue_queue'),
 *     )
 */
function project_projects_select_options(array $conditions = array()) {
  $projects = array();

  $project_node_types = project_project_node_types();
  if (empty($project_node_types)) {
    // If there are no project node types, just return the empty array here.
    return $projects;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node', '=');

  // Restrict the query to the node types that can be projects.
  $query->propertyCondition('type', $project_node_types);

  foreach ($conditions as $condition) {
    $query->fieldCondition($condition['field'],
      isset($condition['column']) ? $condition['column'] : 'value',
      isset($condition['value']) ? $condition['value'] : '1',
      isset($condition['operator']) ? $condition['operator'] : '='
    );
  }

  $result = $query->execute();
  foreach ($result as $entity_type => $project_entities) {
    $project_entities = entity_load($entity_type, array_keys($project_entities));
    foreach ($project_entities as $project) {
      $project_entity_ids = entity_extract_ids('node', $project);
      $projects[$project_entity_ids[0]] = $project->title;
    }
  }
  return $projects;
}

/**
 * Implements hook_FORM_ID_form_alter().
 *
 * This adds a 'Project settings' vertical tab to the node_type_form and the
 * initial choice of what behavior a given node type should have relative to
 * the Project* suite. This also invokes a hook that allows other Project*
 * modules to inject their own node-type-specific settings and form elements.
 *
 * @see hook_project_node_type_settings()
 * @see node_type_form_submit()
 */
function project_form_node_type_form_alter(&$form) {
  $node_type = $form['#node_type']->type;
  $project_behavior = variable_get('project_behavior_' . $node_type, 'none');
  $behavior_options = array(
    'none' => 'Not related to projects',
  );

  $form['project'] = array(
    '#type' => 'fieldset',
    '#title' => t('Project settings'),
    '#collapsible' => TRUE,
    '#group' => 'additional_settings',
  );

  $form['project']['project_behavior'] = array(
    '#title' => t('How does this content type relate to the Project system?'),
    '#type' => 'radios',
    '#default_value' => $project_behavior,
  );

  // @todo: This is stupid. We want something like module_collate_info().
  // @see http://drupal.org/node/890660
  foreach (module_implements('project_node_type_settings') as $module) {
    $function = "{$module}_project_node_type_settings";
    $form_elements = $function($form);
    $behavior_options[$module] = isset($form_elements['#behavior_label']) ? $form_elements['#behavior_label'] : $module;

    foreach (element_children($form_elements) as $key) {
      $form_elements[$key]['#states'] = array(
        'visible' => array(
          ':input[name="project_behavior"]' => array('value' => $module),
        ),
      );
      $form['project'][$module][$key] = $form_elements[$key];
    }
  }

  $form['project']['project_behavior']['#options'] = $behavior_options;
}

/**
 * Implements hook_project_node_type_settings().
 *
 * For now, there are no project-specific settings, we only care about the
 * label for the project behavior setting itself.
 *
 * @return array
 *   Form elements to use for project-specific settings. The special key
 *   '#behavior_label' is used for the radio button label on the 'Project
 *   behavior' setting.
 */
function project_project_node_type_settings($form) {
  return array(
    '#behavior_label' => t('Used for projects'),
  );
}
